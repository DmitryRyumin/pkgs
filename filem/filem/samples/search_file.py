#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Поиск файла

python filem/samples/search_file.py --file путь_к_файлу [--create --no_clear_shell]
"""

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
import os  # Работа с файловой системой

import argparse  # Парсинг аргументов и параметров командной строки

# Персональные
from trml.shell import Shell  # Работа с Shell
from filem.file_manager import FileManager  # Работа с файлами


# ######################################################################################################################
# Выполняем только в том случае, если файл запущен сам по себе
# ######################################################################################################################
def main():
    # Построение аргументов командой строки
    ap = argparse.ArgumentParser()

    ap.add_argument('--file', required=True, help='Путь к файлу')
    ap.add_argument('--create', action='store_true', help='Создание файла в случае его отсутствия')
    ap.add_argument('--no_clear_shell', action='store_false', help='Не очищать консоль перед выполнением')

    args = vars(ap.parse_args())  # Преобразование списка аргументов командной строки в словарь

    # Очистка консоли перед выполнением
    if args['no_clear_shell'] is True:
        Shell.clear()  # Очистка консоли

    # Поиск файла
    _, ext = os.path.splitext(args['file'])  # Расширение файла

    file_manager = FileManager()  # Работа с файлами

    file_manager.search(args['file'], ext.replace('.', ''), args['create'])  # Поиск файла


if __name__ == "__main__":
    main()
