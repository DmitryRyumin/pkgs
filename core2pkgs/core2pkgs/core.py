#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Ядро для пакетов
"""

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
import argparse   # Парсинг аргументов и параметров командной строки

from datetime import datetime  # Работа со временем

# Персональные
from core2pkgs import config as cfg  # Глобальный файл настроек
from trml.shell import Shell  # Работа с Shell


# ######################################################################################################################
# Ядро для пакетов
# ######################################################################################################################
class Core(cfg.Messages):
    """Ядро для пакетов"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

    # ------------------------------------------------------------------------------------------------------------------
    #  Внутренние методы
    # ------------------------------------------------------------------------------------------------------------------

    # Построение аргументов командной строки
    @staticmethod
    def build_args():
        """
        Построение аргументов командной строки
        """

        ap = argparse.ArgumentParser()

        ap.add_argument('--config', required = True, help = 'Путь к конфигурационному файлу')
        ap.add_argument('--no_clear_shell', action = 'store_false', help = 'Не очищать консоль перед выполнением')
        ap.add_argument('--automatic_update', action = 'store_true',
                        help = 'Автоматическая проверка конфигурационного файла в момент работы программы')
        ap.add_argument('--frames_to_update', type = int, default = 25,
                        help = 'Через какое количество кадров проверять конфигурационный файл '
                               '(работает при --automatic_update, значение по умолчанию: %(default)s)')

        return vars(ap.parse_args())  # Преобразование списка аргументов командной строки в словарь

    # Очистка консоли
    def clear_shell(self, cls, out = True):
        """
        Очистка консоли

        (bool [, bool]) -> None

        Аргументы:
           cls - Вариант очистки консоли
           out - Печатать процесс выполнения
        """

        # Проверка аргументов
        if type(cls) is not bool or type(out) is not bool:
            # Вывод сообщения
            if out is True:
                print(self._invalid_arguments.format(
                    self.red, datetime.now().strftime(self._format_time),
                    self.end, __class__.__name__ + '.' + self._clear_shell.__name__
                ))

            return False

        if cls is True:
            Shell.clear()  # Очистка консоли
