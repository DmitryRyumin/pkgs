#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Воспроизведение видеоданных из сенсора Kinect 2
"""

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
from datetime import datetime  # Работа со временем

# Персональные
from core2pkgs import config as cfg  # Глобальный файл настроек
from kinect2pvv.core import PyKinectRuntime, PyKinectV2  # Работа с Kinect 2

# ######################################################################################################################
# Сообщения
# ######################################################################################################################
class Messages(cfg.Messages):
    """Класс для сообщений"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

        self._run_kinect = '[{}] Запуск сенсора Kinect 2 ...'


# ######################################################################################################################
# Воспроизведение видеоданных из сенсора Kinect 2
# ######################################################################################################################
class KinectViewer(Messages):
    """Класс для Воспроизведения видеоданных из сенсора Kinect 2"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

        self._kinect = None  # Kinect 2

    # ------------------------------------------------------------------------------------------------------------------
    # Свойства
    # ------------------------------------------------------------------------------------------------------------------

    # Получение Kinect 2
    @property
    def kinect(self):
        return self._kinect

    # ------------------------------------------------------------------------------------------------------------------
    #  Внешние методы
    # ------------------------------------------------------------------------------------------------------------------

    # Запуск
    def start(self, out = True):
        """
        Запуск Kinect 2

        ([bool]) -> bool

        Аргументы:
           out - Печатать процесс выполнения

        Возвращает: True если получение запуск Kinect произведен, в обратном случае False
        """

        # Проверка аргументов
        if type(out) is not bool:
            return False

        # Вывод сообщения
        if out is True:
            print(self._run_kinect.format(datetime.now().strftime(self._format_time)))

        return True

        # # Инициализация Kinect на получение цветного изображения, карты глубины и скелетных моделей
        # self._kinect = PyKinectRuntime.PyKinectRuntime(
        #     PyKinectV2.FrameSourceTypes_Color | PyKinectV2.FrameSourceTypes_Body | PyKinectV2.FrameSourceTypes_Depth |
        #     PyKinectV2.FrameSourceTypes_BodyIndex
        # )
        #
        # # Холст для изображений получаемых с Kinect
        # self._frame_surface = pygame.Surface((
        #     self.kinect.color_frame_desc.Width, self.kinect.color_frame_desc.Height), 0, 32
        # )
        #
        # return True