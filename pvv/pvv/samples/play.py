#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Воспроизведение фото/видео данных

python pvv/samples/play.py --file путь_к_фото_видео_файлу [--no_clear_shell]
"""

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
import os        # Работа с файловой системой
import time      # Работа со временем
import argparse  # Парсинг аргументов и параметров командной строки
import cv2       # Алгоритмы компьютерного зрения

from datetime import datetime  # Работа со временем

# Персональные
from core2pkgs import core                  # Глобальный файл настроек
from pvv.viewer import Viewer               # Воспроизведение фото/видео данных
from filem.file_manager import FileManager  # Работа с файлами


# ######################################################################################################################
# Сообщения
# ######################################################################################################################
class Messages(core.Core):
    """Класс для сообщений"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

        self._run_web = '[{}] Запуск WEB камеры ...'
        self._web_not_found = '[{}{}{}] WEB-камера не найдена ...'

        self._frame_rate = 'FPS: {:.2f}'

        self._wrong_extension = '[{}{}{}] Расширение файла должно быть одним из "{}" ...'


# ######################################################################################################################
# Выполняем только в том случае, если файл запущен сам по себе
# ######################################################################################################################
class Run(Messages):
    """Класс для воспроизведения фото/видео данных"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __init__(self):
        super().__init__()  # Выполнение конструктора из суперкласса

        self._args = None  # Аргументы командной строки

        # Поддерживаемые видео форматы
        self._supported_video_formats = ('mp4', 'avi')
        # Поддерживаемые фото форматы
        self._supported_photo_formats = ('png', 'jpg')

        self._labels_font = cv2.FONT_HERSHEY_SIMPLEX  # Шрифт
        self._labels_scale = 0.45  # Коэффициент масштабирования шрифта, который умножается на размер шрифта
        self._labels_thickness = 1  # Толщина линии шрифта

        self._labels_base_coords = (10, 20)  # Базовые координаты текстов
        self._labels_padding = 5  # Внутренний отступ для текстов
        self._labels_distance = 20  # Расстояние между текстами

        self._cap = None  # Захват фото/видеоданных
        self._source = None  # Ресурс захвата фото/видеоданных

        self._viewer = Viewer()  # Воспроизведение фото/видео данных

        self._file_manager = FileManager()  # Работа с файлами

        self._frame_count = 0  # Счетчик кадров

    # ------------------------------------------------------------------------------------------------------------------
    #  Внутренние методы
    # ------------------------------------------------------------------------------------------------------------------

    # Построение аргументов командной строки
    @staticmethod
    def __build_args():
        # Построение аргументов командой строки
        ap = argparse.ArgumentParser()

        ap.add_argument('--file', required = True, help = 'Путь к фото/видео файлу')
        ap.add_argument('--no_clear_shell', action = 'store_false', help = 'Не очищать консоль перед выполнением')

        return vars(ap.parse_args())  # Преобразование списка аргументов командной строки в словарь

    # Захват фото/видеоданных
    def __grab_data(self, out = True):
        """
        Захват фото/видеоданных

        ([bool]) -> bool

        Аргументы:
           out - Печатать процесс выполнения

        Возвращает: True если захват фото/видеоданных произведен, в обратном случае False
        """

        # Проверка аргументов
        if type(out) is not bool:
            return False

        frame = None  # Кадр

        try:
            # Воспроизведение WEB-камеры
            self._args['file'] = int(self._args['file'])  # Попытка приведения названия файла к числу

            if self._args['file'] is not 0:
                return False

            # Вывод сообщения
            if out is True:
                print(self._run_web.format(datetime.now().strftime(self._format_time)))

            self._source = self._args['file']  # Ресурс захвата WEB-камеры

            self._cap = cv2.VideoCapture(self._source)  # Открытие камеры для захвата видеопотока
            has_frame, frame = self._cap.read()  # Захват, декодирование и возврат кадра

            # Текущий кадр не получен
            if not has_frame:
                # Вывод сообщения
                if out is True:
                    print(self._web_not_found.format(datetime.now().strftime(self._format_time)))

                return False
        except ValueError:
            _, ext = os.path.splitext(self._args['file'])  # Расширение файла

            # Поиск файла
            if self._file_manager.search_file(self._args['file'], ext.replace('.', '')) is False:
                return False

        return True

    # Циклическое получение кадров из видеопотока
    def __loop(self, out = True):
        """
        Циклическое получение кадров из фото/видеопотока

        ([bool]) -> bool

        Аргументы:
           out - Печатать процесс выполнения

        Возвращает: True если получение кадров осуществляется, в обратном случае False
        """

        # Проверка аргументов
        if type(out) is not bool:
            return False

        start_time = time.time()  # Отсчет времени выполнения

    # ------------------------------------------------------------------------------------------------------------------
    #  Внешние методы
    # ------------------------------------------------------------------------------------------------------------------

    def run(self):
        self._args = self.__build_args()  # Построение аргументов командной строки

        self.clear_shell(self._args['no_clear_shell'])  # Очистка консоли перед выполнением

        # Захват фото/видеоданных
        if self.__grab_data() is False:
            return False


if __name__ == "__main__":
    main = Run()

    main.run()
